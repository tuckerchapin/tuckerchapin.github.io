name: Issues Blog

on:
  push:
    # paths:
    #   - issues/*
    #   - public/*
    #   - templates/*
  issues:
    types: [opened, edited, deleted, transferred, pinned, unpinned, closed, reopened, assigned, unassigned, labeled, unlabeled, locked, unlocked, milestoned, demilestoned]
  workflow_dispatch:

# TODO happy for this to run concurrently when updating issues
# but then don't want to build concurrently and instead want to pull again
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  sync-issues:
    if: ${{ github.event.issue.number }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout issues branch
        id: checkout-issues
        continue-on-error: true
        with:
          ref: issues
        uses: actions/checkout@v4

      - name: Create issues branch
        if: ${{ steps.checkout-issues.outcome == 'failure' }}
        run: |
          git checkout --orphan issues
          git config --local user.email "action@github.com"
          git config --local user.name "Github Action"
          git commit --allow-empty -m "Initial commit"
          git push -u origin issues

#     # TODO filter out stuff from the blacklist/whitelist
#     # delete issues not made by the opener?
#     # https://docs.github.com/en/actions/managing-issues-and-pull-requests/closing-inactive-issues
      - name: Store issue as JSON
        id: issue-to-json
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const path = `issues/`;
            const fs = require('fs');
            if (!fs.existsSync()) fs.mkdirSync(path, { recursive: true });
            fs.writeFileSync(`${path}issue-${context.issue.number}.json`, JSON.stringify(context.payload.issue, null, 2));
            // TODO when an issue is deleted, delete it instead of writing an update of god knows what payload
            let changesSummary = '';
            if (context.payload.changes) {
              changesSummary = ' ' + Object.keys(context.payload.changes).reduce((a, c, i, arr) => {
                if (i === 0) return c;
                if (i === arr.length - 1) return `${a} & ${c}`;
                return `${a}, ${c}`;
              }, '');
            }
            return `${context.payload.action} issue #${context.issue.number}${changesSummary}`;
          result-encoding: string

      - name: Commit and push
        run: |
          if [[ $(git status --porcelain | wc -l) -gt 0 ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "Github Action"
            git add .
            git commit -m "${{ steps.issue-to-json.outputs.result }}"
            git pull --rebase
            git push
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "::warning title=Nothing to commit::Not rebuilding or deploying."
          fi

  build:
    # TODO we want this to run if sync issues doesn't run or wait if it does
    # needs: sync-issues
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout repo
        with:
          path: issues
          ref: issues
        uses: actions/checkout@v4

      - name: Log
        run: |
          echo $(ls -a)

      # TODO need to read from issues and main dir for everything else

      - name: Template & build static files
        id: issue-to-html
        run: node dist/index.js

      # TODO publish to gh pages
      # remove these other steps
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3


  # TODO only deploy if there's a diff? or always deploy? why not lol
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4